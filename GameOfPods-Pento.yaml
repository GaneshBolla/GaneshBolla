MasterNode 
Master node: coredns deployment has image: 'k8s.gcr.io/coredns:1.3.1'
Fix kube-apiserver. Make sure its running and healthy.
kubeconfig = /root/.kube/config, User = 'kubernetes-admin' Cluster: Server Port = '6443'
$docker ps -a |grep api

$kubectl edit deployment coredns -n kube-system


Node01
node01 is ready and can schedule pods?
$kubectl uncordon node01

pv:
Create new PersistentVolume = 'data-pv'
PersistentVolume = data-pv, accessModes = 'ReadWriteMany'
PersistentVolume = data-pv, hostPath = '/web'
PersistentVolume = data-pv, storage = '1Gi'

apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  hostPath:
   path: /web
   
pvc:
Create new PersistentVolumeClaim = 'data-pvc'
PersistentVolume = 'data-pvc', accessModes = 'ReadWriteMany'
PersistentVolume = 'data-pvc', storage request = '1Gi'
PersistentVolume = 'data-pvc', volumeName = 'data-pv'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: data-pvc
spec:
 accessModes: 
   - ReadWriteMany
 resources:
   requests:
     storage: 1Gi
 volumeName: data-pv
 
pod:
Create a pod for fileserver, name: 'gop-fileserver'
pod: gop-fileserver image: 'kodekloud/fileserver'
pod: gop-fileserver mountPath: '/web'
pod: gop-fileserver volumeMount name: 'data-store'
pod: gop-fileserver persistent volume name: data-store
pod: gop-fileserver persistent volume claim used: 'data-pvc'

---
apiVersion: v1
kind: Pod
metadata:
  name: gop-fileserver
  labels:
    app: fs
spec:
  containers:
    - name: fs
      image: kodekloud/fileserver
      volumeMounts:
      - mountPath: "/web"
        name: data-store
  volumes:
  - name: data-store
    persistentVolumeClaim:
      claimName: data-pvc
        
service:
New Service, name: 'gop-fs-service'
Service name: gop-fs-service, port: '8080'
Service name: gop-fs-service, targetPort: '8080'

---
apiVersion: v1
kind: Service
metadata:
  labels: 
    app: fs
  name: gop-fs-service
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
    nodePort: 31200
  selector: 
    app: fs
  type: NodePort